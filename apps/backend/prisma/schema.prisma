// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  email         String         @unique
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime       @default(now()) @map("updated_at") @db.Timestamptz
  projects      Project[]
  aiMessages    AiMessage[]
  conversations Conversation[]

  @@map("users")
}

model Project {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  title       String
  description String?
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz
  tasks       Task[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "idx_projects_user_id")
  @@map("projects")
}

model Task {
  id          String    @id @default(uuid()) @db.Uuid
  projectId   String    @map("project_id") @db.Uuid
  title       String
  description String?
  status      String    @default("todo")
  dueDate     DateTime? @map("due_date") @db.Timestamptz
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamptz
  subtasks    Subtask[]
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId], name: "idx_tasks_project_id")
  @@map("tasks")
}

model Subtask {
  id          String   @id @default(uuid()) @db.Uuid
  taskId      String   @map("task_id") @db.Uuid
  title       String
  isCompleted Boolean  @default(false) @map("is_completed")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId], name: "idx_subtasks_task_id")
  @@map("subtasks")
}

model AiMessage {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  content   String
  role      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "idx_ai_messages_user_id")
  @@map("ai_messages")
}

// 新しいモデル: Conversation（会話）
model Conversation {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  projectId String?   @map("project_id") @db.Uuid
  title     String    @default("New Conversation")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamptz
  messages  Message[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "idx_conversations_user_id")
  @@map("conversations")
}

// 新しいモデル: Message（メッセージ）
model Message {
  id             String       @id @default(uuid()) @db.Uuid
  conversationId String       @map("conversation_id") @db.Uuid
  content        String
  role           String       // user, assistant, system
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId], name: "idx_messages_conversation_id")
  @@map("messages")
}
